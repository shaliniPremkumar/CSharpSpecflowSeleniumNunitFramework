// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UnregisteredVehiclePermitAutomation.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("UnregisteredVehiclePermit")]
    public partial class UnregisteredVehiclePermitFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "UnregisteredVehiclePermit.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "UnregisteredVehiclePermit", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
#line 4
 testRunner.Given("User navigates to Unregistered Vehicle Permit URL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Enter vehicle permit details")]
        [NUnit.Framework.CategoryAttribute("Step2Verification")]
        [NUnit.Framework.TestCaseAttribute("PassengerVehicle", "Sedan", "Unit 711 Sample Street Broadmeadows VIC 3047", "05/10/2021", "18", null)]
        [NUnit.Framework.TestCaseAttribute("PassengerVehicle", "StationWagon", "12 Test Street Docklands VIC 3008", "01/09/2021", "28", null)]
        [NUnit.Framework.TestCaseAttribute("PassengerVehicle", "Coupe", "VIC 3000", "01/02/2022", "6", null)]
        [NUnit.Framework.TestCaseAttribute("PassengerVehicle", "Roadster", "Melbourne VIC 3000", "01/09/2021", "3", null)]
        [NUnit.Framework.TestCaseAttribute("PassengerVehicle", "SelfPropelledCaravan", "Unit 7 11 Sample Street Broadmeadows VIC 3047", "01/09/2021", "2", null)]
        [NUnit.Framework.TestCaseAttribute("PassengerVehicle", "BusOrVanSeatingUpToNine", "12 Test Street Docklands VIC 3008", "29/09/2021", "10", null)]
        [NUnit.Framework.TestCaseAttribute("PassengerVehicle", "BusOrVanSeatingTenOrMore", "VIC 3003", "11/11/2021", "1", null)]
        [NUnit.Framework.TestCaseAttribute("PrimeMover", "", "12 Test Street Docklands VIC 3008", "02/09/2021", "14", null)]
        [NUnit.Framework.TestCaseAttribute("Trailer", "", "VIC 3004", "07/09/2021", "5", null)]
        public virtual void EnterVehiclePermitDetails(string vehicleType, string subTypeOrCapacity, string address, string permitStartDate, string permitDurationInDays, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Step2Verification"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("VehicleType", vehicleType);
            argumentsOfScenario.Add("SubTypeOrCapacity", subTypeOrCapacity);
            argumentsOfScenario.Add("Address", address);
            argumentsOfScenario.Add("PermitStartDate", permitStartDate);
            argumentsOfScenario.Add("PermitDurationInDays", permitDurationInDays);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Enter vehicle permit details", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 8
 testRunner.Then("\'Step 1 of 7 : Calculate fee\' step is displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 9
 testRunner.When(string.Format("User enters the mandatory details {0}, {1}, {2}, {3} and {4} in Step 1 of 7: Calc" +
                            "ulate Fee", vehicleType, subTypeOrCapacity, address, permitStartDate, permitDurationInDays), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 10
 testRunner.And("User Clicks on Calculate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 11
 testRunner.And("Clicks on Next", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 12
 testRunner.Then("\'Step 2 of 7 : Select permit type\' step is displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
